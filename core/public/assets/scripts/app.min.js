(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var numberOfTds, table;

require("../views/users/auth/auth");

require("../views/addkanji/addform/addform");

require("../views/root/kanjis/changekanji");

require("../views/root/kanjis/card.cjsx");

table = require("../views/root/kanjis/table");

numberOfTds = 7;

table(numberOfTds);


},{"../views/addkanji/addform/addform":2,"../views/root/kanjis/card.cjsx":3,"../views/root/kanjis/changekanji":4,"../views/root/kanjis/table":5,"../views/users/auth/auth":6}],2:[function(require,module,exports){
var form;

form = document.forms.newGlyph;

if (form) {
  form.addEventListener("submit", function(e) {
    var formData, i, j, len, readings, xhr;
    e.preventDefault();
    readings = this.querySelectorAll(".kanjiReading");
    for (j = 0, len = readings.length; j < len; j++) {
      i = readings[j];
      if (!i.value) {
        i.parentNode.removeChild(i);
      }
    }
    xhr = new XMLHttpRequest;
    xhr.onreadystatechange = function() {
      var res;
      if (this.readyState !== 4) {
        return;
      }
      res = JSON.parse(this.responseText);
      if (res.message) {
        if (res.message.indexOf("duplicate key") !== -1) {
          alert("Первые 2 поля должны быть уникальны");
        }
        if (res.message.indexOf("validation failed") !== -1) {
          return alert("Поля должны быть заполнены. И хватить баловаться с HTML куллхацкеры");
        }
      } else {
        return alert(res.success);
      }
    };
    xhr.open("POST", "/modKanji/add");
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    formData = new FormData(document.forms.newGlyph);
    return xhr.send(formData);
  });
  form.addEventListener("click", function(event) {
    var newInp, oldName, oldType, preElem, target;
    target = event.target;
    if (target.id === "addVal") {
      preElem = target.previousSibling;
      if (preElem.parentNode.getElementsByTagName("input").length > 19) {
        return;
      }
      oldType = preElem.getAttribute("type");
      oldName = preElem.getAttribute("name");
      newInp = document.createElement("input");
      newInp.setAttribute("type", oldType);
      newInp.setAttribute("name", oldName);
      newInp.classList.add("kanjiReading");
      newInp.classList.add("form-control");
      return preElem.parentNode.insertBefore(newInp, target);
    }
  });
}


},{}],3:[function(require,module,exports){
var KanjiCard, React, reactDOM;

React = require("react");

reactDOM = require("reactDOM");

KanjiCard = React.createClass({
  displayName: "KanjiCard",
  render: function() {
    var glyph;
    glyph = this.props.glyph;
    return React.createElement("div", {
      "id": "kanji-card",
      "className": "kanji-card"
    }, React.createElement("p", {
      "className": "close",
      "onClick": this.handleCloseClick
    }, "✗"), React.createElement("aside", {
      "id": "left",
      "className": "left"
    }, React.createElement("div", {
      "className": "field"
    }, React.createElement("img", {
      "src": glyph.images["static"][0],
      "alt": glyph.glyph
    })), React.createElement("div", {
      "className": "info"
    }, React.createElement("div", {
      "className": "field"
    }, React.createElement("h4", {
      "data-val": "glyph"
    }, "Иероглиф"), React.createElement("p", null, glyph.glyph)), React.createElement("div", {
      "className": "field"
    }, React.createElement("h4", {
      "data-val": "JLPT"
    }, "Уровень JLPT"), React.createElement("p", null, glyph.JLPT)), React.createElement("div", {
      "className": "field"
    }, React.createElement("h4", {
      "data-val": "glyphKey"
    }, "Иероглиф ключ"), React.createElement("p", null, glyph.glyphKey)), React.createElement("div", {
      "className": "field"
    }, React.createElement("h4", {
      "data-val": "value"
    }, "Значение"), React.createElement("p", null, glyph.value)), React.createElement("div", {
      "className": "field"
    }, React.createElement("h4", {
      "data-val": "quanLine"
    }, "Количество черт"), React.createElement("p", null, glyph.quanLine)), React.createElement("div", {
      "className": "field"
    }, React.createElement("h4", {
      "data-val": "extraLine"
    }, "Доп. черты"), React.createElement("p", null, glyph.extraLine))), React.createElement("div", {
      "className": "field"
    }, React.createElement("img", {
      "src": glyph.images["static"][1],
      "alt": glyph.glyph
    }))), React.createElement("aside", {
      "className": "right"
    }, React.createElement("div", {
      "className": "field"
    }, React.createElement("h3", {
      "data-val": "onYomi"
    }, "Он ёми"), glyph.onYomi.map(function(yomi) {
      return React.createElement("p", null, yomi);
    })), React.createElement("div", {
      "className": "field"
    }, React.createElement("h3", {
      "data-val": "kunYomi"
    }, "Кун ёми"), glyph.kunYomi.map(function(yomi) {
      return React.createElement("p", null, yomi);
    })), React.createElement("div", {
      "className": "field",
      "className": "phrases"
    }, React.createElement("h3", null, "Cловосочетание"), React.createElement("p", null, "test"), React.createElement("p", null, "test"))), React.createElement("p", {
      "id": "glyphId",
      "hidden": true
    }, glyph._id));
  },
  handleCloseClick: function(e) {
    var node;
    node = e.target.parentNode;
    return node.parentNode.removeChild(node);
  }
});

module.exports = KanjiCard;


},{"react":"react","reactDOM":"reactDOM"}],4:[function(require,module,exports){
var ChangeKanji, checkRight,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ChangeKanji = (function() {
  function ChangeKanji() {
    this.showForm = bind(this.showForm, this);
    this.showIcon = bind(this.showIcon, this);
    this.icon = document.getElementById("modIcon").cloneNode(false);
    this.form = document.forms.changeKanji.cloneNode(true);
    this.formRemove = document.forms.remove.cloneNode(true);
  }

  ChangeKanji.prototype.showIcon = function(event) {
    var target, value;
    value = null;
    target = event.target;
    while (target !== document.getElementById("kanji-card")) {
      if (target.className === "field") {
        target.appendChild(this.icon);
        this.icon.addEventListener("click", this.showForm);
        return;
      }
      target = target.parentNode;
    }
  };

  ChangeKanji.prototype.showForm = function(event) {
    var allImg, allP, i, inp, inps, j, k, len, len1, results, target, value;
    this.form.addEventListener("submit", this.submitForm);
    value = null;
    target = event.target;
    allP = target.parentNode.getElementsByTagName("p");
    allImg = target.parentNode.getElementsByTagName("img")[0];
    inps = this.form.getElementsByTagName("input");
    if (inps.length !== 0) {
      for (j = 0, len = inps.length; j < len; j++) {
        i = inps[j];
        this.form.removeChild(inps[0]);
      }
    }
    target.parentNode.appendChild(this.form);
    this.form.style.top = this.form.parentNode.firstChild.offsetHeight + "px";
    if (target.parentNode.children[0].tagName === "IMG") {
      this.form.style.top = 0;
      inp = document.createElement("input");
      inp.type = "file";
      inp.name = this.form.parentNode.firstChild.src.slice(this.form.parentNode.firstChild.src.lastIndexOf("/"));
      this.form.appendChild(inp);
      return;
    }
    results = [];
    for (k = 0, len1 = allP.length; k < len1; k++) {
      i = allP[k];
      inp = document.createElement("input");
      inp.classList.add("kanjiReading");
      inp.type = "text";
      inp.name = this.form.parentNode.firstChild.dataset.val;
      inp.value = i.innerHTML;
      inp.style.top = i.previousSibling.offsetHeight + "px";
      results.push(this.form.appendChild(inp));
    }
    return results;
  };

  ChangeKanji.prototype.submitForm = function(e) {
    var _id, form, formData, i, j, len, readings, xhr;
    e.preventDefault();
    form = this;
    _id = document.getElementById("_id").cloneNode(false);
    _id.value = document.getElementById("glyphId").innerHTML;
    this.appendChild(_id);
    xhr = new XMLHttpRequest;
    readings = this.querySelectorAll(".kanjiReading");
    for (j = 0, len = readings.length; j < len; j++) {
      i = readings[j];
      if (!i.value) {
        this.removeChild(i);
      }
    }
    xhr.onreadystatechange = function() {
      var allP, inps, k, ref;
      if (this.readyState !== 4) {
        return;
      }
      if (this.responseText === "Изменение сохранены.") {
        form.removeChild(_id);
        inps = form.getElementsByTagName("input");
        allP = form.parentNode.getElementsByTagName("p");
        for (i = k = 0, ref = allP.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
          if (!inps[i]) {
            break;
          }
          allP[i].innerHTML = inps[i].value;
        }
        form.parentNode.removeChild(form);
        return alert("Изменение сохранены.");
      }
    };
    xhr.open("POST", "/modKanji/change");
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    formData = new FormData(document.forms.changeKanji);
    return xhr.send(formData);
  };

  ChangeKanji.prototype.remove = function() {
    var _id;
    _id = document.getElementById("_id").cloneNode(false);
    _id.value = document.getElementById("glyphId").innerHTML;
    console.log(_id.value);
    this.formRemove.appendChild(_id);
    return document.getElementById("kanji-card").appendChild(this.formRemove);
  };

  return ChangeKanji;

})();

checkRight = function() {
  var card, change;
  if (!document.getElementById("blockChangeKanji")) {
    return;
  }
  card = document.getElementById("kanji-card");
  change = new ChangeKanji;
  card.addEventListener("mouseover", change.showIcon);
  return change.remove();
};

module.exports = checkRight;


},{}],5:[function(require,module,exports){
var KanjiCard, React, changeKanji, downloadGlyphs, reactDOM, renderGlyphs, table;

React = require("react");

reactDOM = require("reactDOM");

KanjiCard = require("./card");

changeKanji = require("./changekanji");

table = document.getElementById("allKanji");

renderGlyphs = function(arr, tdCount) {
  var tr;
  tr = table.querySelector("tr");
  arr.forEach(function(item, i, arr) {
    var glyph, td;
    glyph = item.glyph;
    td = document.createElement("td");
    td.innerHTML = glyph;
    if (tr.getElementsByTagName("td").length > tdCount) {
      tr = document.createElement("tr");
      table.children[0].appendChild(tr);
      return tr.appendChild(td);
    } else {
      return tr.appendChild(td);
    }
  });
  return table.addEventListener("click", function(event) {
    var glyph, i, j, len, target;
    target = event.target;
    if (target.tagName !== "TD") {
      return;
    }
    for (j = 0, len = arr.length; j < len; j++) {
      i = arr[j];
      if (i.glyph === target.textContent) {
        glyph = i;
      }
    }
    React.render(React.createElement(KanjiCard, {
      "glyph": glyph
    }), document.getElementById("card"));
    return changeKanji();
  });
};

downloadGlyphs = function(tdCount) {
  var xhr;
  if (!table) {
    return;
  }
  xhr = new XMLHttpRequest;
  xhr.onreadystatechange = function() {
    var glyphs;
    if (this.readyState !== 4) {
      return;
    }
    glyphs = JSON.parse(this.responseText);
    return renderGlyphs(glyphs, tdCount);
  };
  xhr.open('GET', "/renderKanji/all");
  xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
  return xhr.send();
};

module.exports = downloadGlyphs;


},{"./card":3,"./changekanji":4,"react":"react","reactDOM":"reactDOM"}],6:[function(require,module,exports){
"use strict";
var form;

if (!window.fetch) {
  require("fetch");
  require("promise");
}

form = document.getElementById("formAuth");

if (form) {
  form.addEventListener("submit", function(event) {
    event.preventDefault();
    return fetch("/users/auth", {
      method: this.method,
      body: new FormData(this),
      credentials: "include"
    }).then(function(res) {
      if (res.status !== 200) {
        return alert("Ошибка. Статус Код: " + res.status);
      }
      return res.text();
    }).then(function(text) {
      if (text === "success") {
        return window.location.replace("/");
      } else {
        return alert(text);
      }
    })["catch"](function(err) {
      return alert(err);
    });
  });
}


},{"fetch":"fetch","promise":"promise"}]},{},[1]);
